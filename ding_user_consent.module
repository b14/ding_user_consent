<?php
/**
 * @file
 * Ding user consent
 */

/**
 * Implements hook_ding_provider_user().
 */
function ding_user_consent_ding_provider_user() {
  return array(
    'user_content' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ding_user_consent_menu() {
  $items = array();
  // User consent admin page.
  $items['admin/config/ding/consent'] = array(
    'title' => 'Ding consent',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_consent_admin_form'),
    'access arguments' => array('administer ding provider'),
    'file' => 'ding_user_consent.admin.inc',
  );
  // User consent form page.
  $items['user/%user/consent'] = array(
    'title' => 'Give consent',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_user_consent_form'),
    'access callback' => 'ding_user_access',
    'access arguments' => array(1),
    'file' => 'ding_user_consent.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Return the page to redirect user to in order to update consent
 * Used by ding_provider.
 */
function ding_user_consent_page() {
  global $user;
  if (user_is_logged_in()) {
    return 'user/' . $user->uid . '/consent';
  }
  return 'user/login';
}

/**
 * Return the users consent if such exists.
 * Should the censent be missing and have the required flag, the DingProviderConsentException is thrown.
 *
 * @param int $consent_id
 *   The id of the consent to check for, if null the complete list of consents the user has given will be returned if any.
 * @param user $account
 *   The user account to check consent for, if null the current logged in user is used.
 *
 * @return
 *   This function returns either the specific consent as a 1 or 0, or the array of given consents.
 */
function ding_user_consent_get_consent($consent_id = NULL, $account = FALSE) {
  // Set the account to the current user if it is not provided.
  if (!$account) {
    global $user;
    $account = $user;
  }
  // Get consent info
  $consents = ding_provider_invoke('user_consent', 'info');
  if (!is_null($consent_id)) {
    // Search for a specific consent type.
    // Get the user specific consent.
    $consent = ding_provider_invoke('user_consent', 'get_consent', $account);
    // Throw a DingProviderConsentException if the user has not given consent yet or if consent is required and the user has denied consent.
    if (empty($account->data['consent']) || isset($consent[$consent_id]) && $consents[$consent_id]['required'] && !$consent[$consent_id]) {
      throw new DingProviderConsentException;
    }
    // Return the value if it is set.
    if (!empty($consent[$consent_id])) {
      return $consent[$consent_id];
    }
  }
  else {
    // Throw a DingProviderConsentException if the user has not received a consent notice yet.
    if (empty($consent_id) && empty($account->data['consent'])) {
      throw new DingProviderConsentException;
    }
    // Get user specific consent.
    $consent = ding_provider_invoke('user_consent', 'get_consent', $account);
    foreach ($consents as $id => $values) {
      // Throw a DingProviderConsentException if any of the consent types is missing from the users consent list.
      if (!isset($consent[$id])) {
        throw new DingProviderConsentException;
      }
    }
    // Return consent list.
    return $consent;
  }
  // If all else fails throw a DingProviderConsentException, since we would like user to give consent.
  throw new DingProviderConsentException;
}

/**
 * Check if the users has given consent or not.
 *
 * @param int $consent_id
 *   The id of the consent to check for, if null the complete list of consents the user has given will be returned if any.
 * @param user $account
 *   The user account to check consent for, if null the current logged in user is used.
 *
 * @return bool
 *   Returns TRUE is the user has given consent and FALSE if no consent has been given or is the consent is revoked.
 */
function ding_user_consent_has_consent($consent_id = NULL, $account = FALSE) {
  // Set the account to the current user if it is not provided.
  if (!$account) {
    global $user;
    $account = $user;
  }
  // Check if the user is a user with valid credentials
  if(ding_user_is_provider_user($account)) {
    try {
      // Get consent info
      $consents = ding_provider_invoke('user_consent', 'info');
      if (!is_null($consent_id)) {
        // Search for a specific consent type.
        // Get the user specific consent.
        $consent = ding_provider_invoke('user_consent', 'get_consent', $account);
        // Return false if the user has not given consent yet or if consent is required and the user has denied consent.
        if (empty($account->data['consent']) || isset($consent[$consent_id]) && $consents[$consent_id]['required'] && !$consent[$consent_id]) {
          return FALSE;
        }
        // Return true if the consent id is set.
        if (!empty($consent[$consent_id])) {
          return TRUE;
        }
      }
      else {
        // Return false if the user has not received a consent notice yet.
        if (empty($consent_id) && empty($account->data['consent'])) {
          return FALSE;
        }
        // Get user specific consent.
        $consent = ding_provider_invoke('user_consent', 'get_consent', $account);
        // Return false if any of the consent types is missing from the users consent list.
        foreach ($consents as $id => $values) {
          if (!isset($consent[$id])) {
            return FALSE;
          }
        }
        // Return true
        return TRUE;
      }
    } catch (Exception $e) {
      // In case of an exception return false
      return FALSE;
    }
  } else {
    // Default to false
    return FALSE;
  }
}

/**
 * Attach consent for to user profile form
 */
function ding_user_consent_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $account = $form['#user'];
  // Ensure that the user related to this profile form is a valid user and 
  if (ding_user_is_provider_user($account) && $account->uid == $GLOBALS['user']->uid) {
    $consents = ding_provider_invoke('user_consent', 'info');
    if($consents) {
      $form['user_consent'] = array(
        '#type' => 'fieldset', 
        '#title' => t('Legal consent'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      $consent = ding_provider_invoke('user_consent', 'get_consent', $account);
      foreach ($consents as $id => $values) {
        if (!isset($values['title'])) {
          $values['title'] = t('Legal consent');
        }
        $form['user_consent'][$id] = array(
          '#type' => 'checkbox',
          '#title' => check_plain($values['title']),
          '#default_value' => !empty($consent[$id]) ? $consent[$id] : 0,
        );
        $form['user_consent'][$id]['#description'] = (!empty($values['description'])) ? check_plain($values['description']) : '';
        if (variable_get($id . '_description_link', '')) {
          $form['user_consent'][$id]['#description'] = format_string(
            $form['user_consent'][$id]['#description'] . ' !br !url', 
            array(
              '!br' => '<br>', 
              '!url' =>  l(t('Read more'), variable_get($id . '_description_link', ''))
            )
          );
        }
      }
      $form['#validate'][] = 'ding_user_consent_form_user_profile_form_validate';
      $form['#submit'][] = 'ding_user_consent_form_user_profile_form_submit';
    }
  }
}

/**
 * Validate user consent before submitting user edit data.
 */
function ding_user_consent_form_user_profile_form_validate($form, &$form_state) {
  $user = $form_state['user'];
  if (empty($user->data['consent'])) {
    // If this is the first time the user has been presented with the consent form no data is stored in the data['consent']
    // and we therefore ensure that data['consent'] is set to prevent the consent form from reappearing when the user performs
    // actions that would impacted consent, unless the functionality requires consent.
    $form_state['input']['data']['consent'] = 1;
    $form_state['values']['data']['consent'] = 1;
  }
}

/**
 * Submit user consent on user edit save.
 */
function ding_user_consent_form_user_profile_form_submit($form_id, &$form_state) {
  $consents = ding_provider_invoke('user_consent', 'info');
  
  $user = $form_state['user'];
  $consent = ding_provider_invoke('user_consent', 'get_consent', $user);
  $changed = array();
  foreach ($consents as $id => $values) {
    if ($form_state['input'][$id] <> $consent[$id]) {
      if ($form_state['input'][$id]) {
        $result = ding_provider_invoke('user_consent', 'add', $user, $id, $consent);
      }
      else {
        $result = ding_provider_invoke('user_consent', 'remove', $user, $id, $consent);
      }
      $changed[$id] = ($form_state['input'][$id]) ? TRUE : FALSE;
    }
  }
  module_invoke_all('ding_user_consent_changed', $changed);
}

/**
 * Implements hook_form_alter
 */
function ding_user_consent_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'ding_reservation_reserve_form':
      $form['#attributes']['class'][] = 'link-form';
      //$form['#validate'][] = 'ding_user_consent_form_process';
      break;
      // Falling through on purpose.
    case 'ding_user_consent_form':
      if (isset($form_state['ajaxify'])) {
        $form['actions']['submit']['#ajax'] = array(
          'callback' => 'ding_user_consent_form_callback',
          'wrapper' => drupal_html_id($form_id),
        );
      }
      break;
  }
}

/**
 * Validate reserve form
 */
function ding_user_consent_form_process($form, &$form_state) {
  ding_user_consent_get_consent();
}

/**
 * Ajax command to authenticate. Used by ding_provider.
 */
function ajax_command_ding_user_consent($extra_data) {
  global $user;
  // @todo add support for user/login here.
  module_load_include('inc', 'ding_user_consent', 'ding_user_consent.pages');
  $title = t('Give consent');
  $form_id = 'ding_user_consent_form';
  $form_state = array(
    'ajaxify' => TRUE,  
  );
  $form = drupal_build_form($form_id, $form_state);
  $consent_form = drupal_render($form);
  return ajax_command_ding_popup('ding_user_consent', $title, $consent_form, array('resubmit' => TRUE, 'extra_data' => $extra_data));
}

/**
 * Ajax callback.
 */
function ding_user_consent_form_callback($form, &$form_state) {
  $response = array(
    '#type' => 'ajax',
    '#commands' => array(),
  );
  // Close dialog if successful.
  $response['#commands'][] = ajax_command_ding_popup_close('ding_user_consent');
  return $response;
}